
ifeq ($(HOST_BUILD_SYSTEM),Windows)
PROJECT_ROOT_PATH := d:/JTang_Documents/01_c++/03_workspace/TestMakeHelloWorld
SHARED_LIBRARY_SUFFIX := "dll"
else
PROJECT_ROOT_PATH := /mnt/d/JTang_Documents/01_c++/03_workspace/TestMakeHelloWorld
SHARED_LIBRARY_SUFFIX := "so"
endif

PROJECT_BUILD_ROOT_PATH := $(realpath .)
PROJECT_CODE_PATH := $(PROJECT_ROOT_PATH)/code
PROJECT_INCLUDE_PATH := -I $(PROJECT_CODE_PATH)/Impl/Controller \
                        -I $(PROJECT_CODE_PATH)/Impl/Function/Repeat \
                        -I $(PROJECT_CODE_PATH)/Impl/Function/Reverse
CPPFLAGS := -g -fPIC $(PROJECT_INCLUDE_PATH)
CC := g++

PROJECT_CPP_DIRECTORIES := Frame Impl/Controller Impl/Function/Repeat Impl/Function/Reverse
_PROJECT_CPP_LIST_REALPATH = $(foreach dir,$(addprefix $(PROJECT_CODE_PATH)/,$(PROJECT_CPP_DIRECTORIES)),$(wildcard $(dir)/*.cpp))
_PROJECT_CPP_LIST_RELATIVEPATH = $(subst $(PROJECT_CODE_PATH)/,,$(_PROJECT_CPP_LIST_REALPATH))
PROJECT_OBJECT_LIST_RELATIVEPATH = $(patsubst %.cpp,%.o,$(_PROJECT_CPP_LIST_RELATIVEPATH))

vpath %.o $(PROJECT_BUILD_ROOT_PATH)
vpath %.so $(PROJECT_BUILD_ROOT_PATH)
vpath %.cpp  $(PROJECT_CODE_PATH)
vpath %.h $(PROJECT_CODE_PATH)

HelloWorld:$(filter %main.o,$(PROJECT_OBJECT_LIST_RELATIVEPATH)) -lImpl
	$(CC) $(CPPFLAGS)  $^ -L . -Wl,-rpath=$(PROJECT_BUILD_ROOT_PATH)  -o $@

-include Frame/main.d

.SECONDEXPANSION:
%.d : %.cpp | $$(@D)
	@set -e; rm -f $@; \
	$(CC) -MM $(CPPFLAGS) $^ -MF $@.$$$$; \
	sed 's,\($*\).o[ :]\+,\1.d &,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$


-lImpl: Impl.a
	$(CC) $(CPPFLAGS) -shared -o libImpl.$(SHARED_LIBRARY_SUFFIX) -Wl,-whole-archive $^ -Wl,-no-whole-archive 

Impl.a: $(filter Impl%.o,$(PROJECT_OBJECT_LIST_RELATIVEPATH))
	ar -cr $@ $^

.SECONDEXPANSION:
$(PROJECT_OBJECT_LIST_RELATIVEPATH): | $$(@D)

$(PROJECT_CPP_DIRECTORIES):
	mkdir -p $@

.PHONY : clean print
clean:
	rm -fr *
print:
	echo "$(PROJECT_BUILD_ROOT_PATH)"